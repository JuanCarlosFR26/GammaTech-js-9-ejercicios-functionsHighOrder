import { allCountries } from "./countries.js";
import { fullCountries } from "./countries_data.js";
// 游눹 Ejercicios

// Ejercicios: Nivel 1

const countries = ["Finland", "Sweden", "Denmark", "Norway", "IceLand"];
const names = ["Alfred", "Mathias", "Elias", "Brook"];
const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
const products = [
  { product: "banana", price: 3 },
  { product: "mango", price: 6 },
  { product: "potato", price: " " },
  { product: "avocado", price: 8 },
  { product: "coffee", price: 10 },
  { product: "tea", price: "" },
];

// Explique la diferencia entre forEach, map, filter, and reduce.
// Map y filter devuelven nuevos arrays. forEach solamente itera sobre los elementos y reduce retorna un 칰nico valor

// Defina una funci칩n callback antes de utilizarla en forEach, map, filter o reduce.
function callback() {

}

// Utiliza forEach para mostrar con console.log cada pa칤s del array de pa칤ses.
countries.forEach(e => console.log(e));

console.log('=======================================');

// Utiliza forEach para mostrar con console.log cada nombre del array de nombres.
names.forEach(e => console.log(e));

console.log('=======================================');

// Utiliza forEach para mostrar con console.log cada n칰mero del array de n칰meros.
numbers.forEach(e => console.log(e));

console.log('=======================================');

// Utiliza map para crear un nuevo array cambiando cada pa칤s a may칰sculas en el array de pa칤ses.
const toUpper = countries.map(e => e.toUpperCase());
console.log(toUpper);

console.log('=======================================');

// Utilice map para crear un array de longitudes de pa칤ses a partir del array de pa칤ses.
const lengths = countries.map(e => `Longitud de ${e} = ${e.length}`);
console.log(lengths);

console.log('=======================================');

// Usa map para crear un nuevo array cambiando cada n칰mero al cuadrado en el array de n칰meros.
const expNum = numbers.map(e => `${e} al cuadrado es: ${e ** 2}`);
console.log(expNum);

console.log('=======================================');

// Utilice map para cambiar cada nombre a may칰sculas en el array de nombres.
const upperNames = names.map(e => `${e.toUpperCase()}`);
console.log(upperNames);

console.log('=======================================');

// Utilice map para asignar el array de productos a sus correspondientes precios.
const productsPrice = products.map(e => `El producto ${e.product} tiene un coste de ${e.price === '' || e.price === ' ' ? '----' : e.price} $`);
console.log(productsPrice);

console.log('=======================================');

// Utilice filter para filtrar los pa칤ses que contienen land.
const countriesWithLand = countries.filter(e => e.includes('land') || e.includes('Land'));
console.log(`Los pa칤ses que contienen "land" son: ${countriesWithLand.join(', ')}`);

console.log('=======================================');

// Utilice filter para filtrar los pa칤ses que tienen seis caracteres.
const countriesWithSixChar = countries.filter(e => e.length === 6);
console.log(`Los pa칤ses con 6 caracteres son: ${countriesWithSixChar.join(', ')}`);

console.log('=======================================');

// Utilice filter para filtrar los pa칤ses que contengan seis letras o m치s en el array de pa칤ses.
const countriesWithMoreThanSix = countries.filter(e => e.length >= 6);
console.log(`Los pa칤ses con 6 caracteres o m치s son: ${countriesWithMoreThanSix.join(', ')}`);

console.log('=======================================');

// Utilice filter para filtrar los pa칤ses que empiezan por "E";
const countriesStartsE = countries.filter(e => e.startsWith('e') || e.startsWith('E'));
console.log(`Los pa칤ses que empiezan por e o por E son: ${countriesStartsE.length !== 0 ? countriesStartsE.join(', ') : 'Ninguno empieza por e o E'}`);

console.log('=======================================');

// Utilice filter para filtrar s칩lo los precios con valores.
const pricesOn = products.filter(e => e.price > 0);
for(let i = 0; i < pricesOn.length; i++) {
    console.log(`${pricesOn[i].product} tiene valor.`);
}

console.log('=======================================');

// Declara una funci칩n llamada getStringLists que toma un array como par치metro y devuelve un array s칩lo con elementos string.
const arr = ["loro", "coche", 8, 15, "parque"]
function getStringLists(arr) {
    const strArr = [];
    arr.map(e => {
        if(typeof e === 'string') {
            strArr.push(e);
        }
    });
    return strArr;
}

console.log(getStringLists(arr));

console.log('=======================================');

// Usa reduce para sumar todos los n칰meros del array de n칰meros.
const sumTot = numbers.reduce((acc, cur) => {
    return acc + cur;
}, 0)
console.log(`La suma total del array numbers es: ${sumTot}`);

console.log('=======================================');


// Utiliza reduce para concatenar todos los pa칤ses y producir esta frase: Estonia, Finland, Sweden, Denmark, Norway, y IceLand son pa칤ses del norte de Europa
const concatenation = countries.reduce((acc, cur) => {
    let char = '';
    char = acc + ", " + cur;
    return char;
});
console.log(concatenation);

console.log('=======================================');


// Explique la diferencia entre some y every
// Some devuelve true si alguno de los valores cumple la condici칩n, y every solamente devuelve true si todos los elementos cumplen la condici칩n.

console.log('=======================================');

// Utilice some para comprobar si la longitud de algunos nombres es superior a siete en el array de nombres.
const somehigherSeven = names.some(e => e.length > 7);
console.log(somehigherSeven === false ? `Ning칰n nombre tiene m치s de 7 caracteres` : `Alguno tiene m치s de 7 caracteres`);

console.log('=======================================');

// Utilice every para comprobar si todos los pa칤ses contienen la palabra land.
const everyWithLand = countries.every(e => e.includes('land') || e.includes('Land'));
console.log(everyWithLand);

console.log('=======================================');

// Explique la diferencia entre find y findIndex.
// Find devuelve el valor del primer elemento que encuentre que cumpla la condici칩n, y findIndex devulve el index del primer elemento que cumpla la condici칩n

console.log('=======================================');

// Utilice find para encontrar el primer pa칤s que contenga s칩lo seis letras en el array de pa칤ses.
const firstCountryWithSix = countries.find(e => e.length > 6);
console.log(`El primer pa칤s que tiene m치s de 6 caracteres es ${firstCountryWithSix}`);

console.log('=======================================');

// Utilice findIndex para encontrar la posici칩n del primer pa칤s que contenga s칩lo seis letras en el array de pa칤ses.
const onlySixCountry = countries.findIndex(e => e.length === 6);
console.log(`El pa칤s que contiene 6 letras es el del 칤ndice ${onlySixCountry}, que es ${countries[1]}`);

console.log('=======================================');

// Utilice findIndex para encontrar la posici칩n de Norway si no existe en el array obtendr치 -1.
const findNor = countries.findIndex(e => e === 'Norway');
console.log(`Buscamos Norway, y est치 en la posici칩n ${findNor}`);

console.log('=======================================');

// Utilice findIndex para encontrar la posici칩n de Russia si no existe en el array obtendr치 -1.
const findRus = countries.findIndex(e => e === 'Russia');
console.log(`Buscamos Norway, y est치 en la posici칩n: ${findRus === -1 ? 'No existe' : `${findRus}`}`);

console.log('=======================================');

// Ejercicios: Nivel 2

// Encuentre el precio total de los productos encadenando dos o m치s iteradores de matrices (por ejemplo, arr.map(callback).filter(callback).reduce(callback)).
const productsWithPrices = products.filter(e => e.price > 0);
const pricesProducts = productsWithPrices.map(e => e.price);
const totalSum = pricesProducts.reduce((acc, cur) => acc + cur, 0);
console.log(`La suma total de precios es de ${totalSum} $`);

console.log('=======================================');

// Encuentre la suma del precio de los productos usando s칩lo reduce(callback)).
const pricesTotalReduce = products.reduce((acc, cur) => {
    if(cur.price === "" || cur.price === " ") {
        cur.price = 0;
    }
    return acc + cur.price;
}, 0);
console.log(`La suma total usando solamente Reduce es ${pricesTotalReduce}`);

console.log('=======================================');

// Declara una funci칩n llamada categorizeCountries que retorna un array de pa칤ses que tienen alg칰n patr칩n com칰n (encuentras el array de pa칤ses en este repositorio como countries.js(ej 'land', 'ia', 'island','stan')).
function categorizeCountries(element) {
    const country = element.filter(e => e.toLowerCase().includes('land'));
    return country;
}

console.log(categorizeCountries(allCountries));

console.log('=======================================');

// Cree una funci칩n que retorne un array de objetos, que es la letra y el n칰mero de veces que la letra usa para empezar el nombre de un pa칤s.
function countryStartWith(element) {
    const country = element.filter(e => e.toLowerCase().startsWith('c'))
    return {
        country: country,
        paisesCon: country.length
    }
}

console.log(countryStartWith(allCountries));

console.log('=======================================');

// Declara una funci칩n getFirstTenCountries y retorna un array de diez pa칤ses. Utiliza diferente programaci칩n funcional para trabajar en el array countries.js.
function getFirstTenCountries(element) {
    const tenCountries = element.slice(0, 10);
    const newArr = tenCountries.map(e => e);

    return newArr;
}

console.log(getFirstTenCountries(allCountries));
console.log('=======================================');


// Declara una funci칩n getLastTenCountries que devuelve los 칰ltimos diez pa칤ses del array de pa칤ses.
function getLastTenCountries(element) {
    const lastTenCountries = element.slice(-10);
    const newArr = lastTenCountries.map(e => e);

    return newArr;
}

console.log(getLastTenCountries(allCountries));

console.log('=======================================');


// Encuentre qu칠 letra se utiliza muchas veces como inicial de un nombre de pa칤s del array de pa칤ses (ej. Finland, Fiji, France etc)
function getMostUsedInitial(element) {
    let countryCounts = {};

    element.forEach(element => {
        const firstLetter = element.charAt(0).toLowerCase();
        if(countryCounts[firstLetter]) {
            countryCounts[firstLetter]++;
        } else {
            countryCounts[firstLetter] = 1;
        }
    });

    const mostCommonLetter = Object.keys(countryCounts).reduce((acc, cur) => countryCounts[acc] > countryCounts[cur] ? acc : cur);


    return `La inicial que m치s se repite es la '${mostCommonLetter.toUpperCase()}'. Se repite ${countryCounts["s"]} veces.`;
}

console.log(getMostUsedInitial(allCountries));


console.log('=======================================');

// Ejercicios: Nivel 3

// Utiliza la informaci칩n de los pa칤ses, en la carpeta de datos. Ordena los pa칤ses por nombre, por capital, por poblaci칩n
// Ordenado por nombre:
fullCountries.sort((a, b) => {
    if(a.name < b.name) return -1;
    if(a.name > b.name) return 1;
    return 0;
})

console.log(fullCountries);

// Ordenado por caputal
fullCountries.sort((a, b) => {
    if(a.capital < b.capital) return -1;
    if(a.capital > b.capital) return 1;
    return 0;
})
console.log(fullCountries);

// Ordenado por poblaci칩n
fullCountries.sort((a, b) => {
    if(a.population < b.population) return -1;
    if(a.population > b.population) return 1;
    return 0;
})
console.log(fullCountries);




// *** Encuentre las 10 lenguas m치s habladas:

// // El resultado deber칤a ser el siguiente
// console.log(mostSpokenLanguages(countries, 10))
// [
// {country: 'English',count:91},
// {country: 'French',count:45},
// {country: 'Arabic',count:25},
// {country: 'Spanish',count:24},
// {country:'Russian',count:9},
// {country:'Portuguese', count:9},
// {country:'Dutch',count:8},
// {country:'German',count:7},
// {country:'Chinese',count:5},
// {country:'Swahili',count:4}
// ]

// // El resultado deber칤a ser el siguiente
// console.log(mostSpokenLanguages(countries, 3))
// [
// {country: 'English',count: 91},
// {country: 'French',count: 45},
// {country: 'Arabic',count: 25},
// ]```

// *** Utilice el archivo countries_data.js para crear una funci칩n que cree los diez pa칤ses m치s poblados.

// console.log(mostPopulatedCountries(countries, 10))

// [
// {country: 'China', population: 1377422166},
// {country: 'India', population: 1295210000},
// {country: 'United States of America', population: 323947000},
// {country: 'Indonesia', population: 258705000},
// {country: 'Brazil', population: 206135893},
// {country: 'Pakistan', population: 194125062},
// {country: 'Nigeria', population: 186988000},
// {country: 'Bangladesh', population: 161006790},
// {country: 'Russian Federation', population: 146599183},
// {country: 'Japan', population: 126960000}
// ]

// console.log(mostPopulatedCountries(countries, 3))
// [
// {country: 'China', population: 1377422166},
// {country: 'India', population: 1295210000},
// {country: 'United States of America', population: 323947000}
// ]
// ```

// *** Intenta desarrollar un programa que calcule la medida de tendencia central de una muestra(mean, median, mode) y medida de la variabilidad(range, variance, standard deviation). Adem치s de esas medidas, encuentre el m칤nimo, el m치ximo, el recuento, el porcentaje y la distribuci칩n de frecuencias de la muestra. Puede crear un objeto llamado estad칤sticas y crear todas las funciones que hacen c치lculos estad칤sticos como m칠todo para el objeto estad칤sticas. Comprueba el resultado que aparece a continuaci칩n.

// const ages = [31, 26, 34, 37, 27, 26, 32, 32, 26, 27, 27, 24, 32, 33, 27, 25, 26, 38, 37, 31, 34, 24, 33, 29, 26]

// console.log('Count:', statistics.count()) // 25
// console.log('Sum: ', statistics.sum()) // 744
// console.log('Min: ', statistics.min()) // 24
// console.log('Max: ', statistics.max()) // 38
// console.log('Range: ', statistics.range() // 14
// console.log('Mean: ', statistics.mean()) // 30
// console.log('Median: ',statistics.median()) // 29
// console.log('Mode: ', statistics.mode()) // {'mode': 26, 'count': 5}
// console.log('Variance: ',statistics.var()) // 17.5
// console.log('Standard Deviation: ', statistics.std()) // 4.2
// console.log('Variance: ',statistics.var()) // 17.5
// console.log('Frequency Distribution: ',statistics.freqDist()) # [(20.0, 26), (16.0, 27), (12.0, 32), (8.0, 37), (8.0, 34), (8.0, 33), (8.0, 31), (8.0, 24), (4.0, 38), (4.0, 29), (4.0, 25)]
// console.log(statistics.describe())
// Count: 25
// Sum:  744
// Min:  24
// Max:  38
// Range:  14
// Mean:  30
// Median:  29
// Mode:  (26, 5)
// Variance:  17.5
// Standard Deviation:  4.2
// Frequency Distribution: [(20.0, 26), (16.0, 27), (12.0, 32), (8.0, 37), (8.0, 3